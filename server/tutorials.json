[{"fieldId":1,"itemIds":[],"title":"Tutorial 1","body":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean faucibus tincidunt mauris eget mattis. Cras nec fermentum ex. Aenean maximus dictum ligula non vulputate. Vivamus eget diam ac justo imperdiet aliquet. Proin et sagittis lectus, ut eleifend purus. Duis eget venenatis libero. Cras gravida pulvinar enim, a ultrices turpis fermentum non. Phasellus fermentum bibendum pellentesque. Mauris aliquam auctor augue, vitae lobortis mi luctus sed. Curabitur in tempor lectus, at suscipit augue. Etiam ullamcorper itemum nisi.</p>\n","id":1},{"fieldId":1,"itemIds":[],"title":"Tutorial 2","body":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean faucibus tincidunt mauris eget mattis. Cras nec fermentum ex. Aenean maximus dictum ligula non vulputate. Vivamus eget diam ac justo imperdiet aliquet. Proin et sagittis lectus, ut eleifend purus. Duis eget venenatis libero. Cras gravida pulvinar enim, a ultrices turpis fermentum non. Phasellus fermentum bibendum pellentesque. Mauris aliquam auctor augue, vitae lobortis mi luctus sed. Curabitur in tempor lectus, at suscipit augue. Etiam ullamcorper itemum nisi.</p>\n","id":2},{"fieldId":1,"itemIds":[],"title":"Tutorial 3","body":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean faucibus tincidunt mauris eget mattis. Cras nec fermentum ex. Aenean maximus dictum ligula non vulputate. Vivamus eget diam ac justo imperdiet aliquet. Proin et sagittis lectus, ut eleifend purus. Duis eget venenatis libero. Cras gravida pulvinar enim, a ultrices turpis fermentum non. Phasellus fermentum bibendum pellentesque. Mauris aliquam auctor augue, vitae lobortis mi luctus sed. Curabitur in tempor lectus, at suscipit augue. Etiam ullamcorper itemum nisi.</p>\n","id":3},{"fieldId":2,"itemIds":[1,2,3,4,5,6,7,8],"title":"Static Content Server","body":"<p>This tutorial describes how to create JSON files from content stored in Markdown\nfiles, that can be served from a static server. It can be used, for example, to\nsimulate a content API for an Angular 2 project.</p>\n<h2 id=\"step-1-create-content-in-markdown\">Step 1: Create Content in Markdown</h2>\n<p>The content is stored in Markdown files in a <code>content</code> folder, further separated\nby folders for each content type. The Markdown file name should be an integer ID\nof the content, unique for the type with the extenson <code>.md</code>.</p>\n<p>Create folder <code>content/entires</code>.\nCreate files <code>1.md</code>, <code>2.md</code>, <code>3.md</code> with some content:</p>\n<pre><code class=\"lang-markdown\"><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">\"Some Entry\"</span>\n<span class=\"hljs-meta\">---</span>\n\nSome Content\n</code></pre>\n<h2 id=\"step-2-setup-gulp\">Step 2: Setup Gulp</h2>\n<p>Gulp is used to read the Markdown files from the <code>content</code> directory and create\na JSON file in a <code>server</code> directory. Three Gulp tasks will be needed:</p>\n<ul>\n<li>clean</li>\n<li>markdown</li>\n<li>server</li>\n</ul>\n<p><code>clean</code> will clean the <code>server</code> directory, <code>markdown</code> will read the Markdown\nfiles and create a JSON file and <code>server</code> will post-process the JSON files.</p>\n<p>Install <code>gulp</code>:</p>\n<pre><code class=\"lang-shell\">npm install gulp --<span class=\"hljs-built_in\">save</span>-<span class=\"hljs-built_in\">dev</span>\n</code></pre>\n<p>Create file <code>gulpfile.js</code>:</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-comment\">/* jshint esnext: true */</span>\n<span class=\"hljs-comment\">/* jshint node: true */</span>\n<span class=\"hljs-meta\">\"use strict\"</span>;\n\n<span class=\"hljs-keyword\">const</span> gulp = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'gulp'</span>);\n\ngulp.task(<span class=\"hljs-string\">'clean'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n\n});\n\ngulp.task(<span class=\"hljs-string\">'markdown'</span>, [<span class=\"hljs-string\">'clean'</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n\n});\n\ngulp.task(<span class=\"hljs-string\">'server'</span>, [<span class=\"hljs-string\">'markdown'</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n\n});\n\ngulp.task(<span class=\"hljs-string\">'default'</span>, [<span class=\"hljs-string\">'server'</span>]);\n</code></pre>\n<h2 id=\"step-3-clean-task\">Step 3: Clean Task</h2>\n<p>The <code>clean</code> task will use <code>del</code> to cleanup the <code>server</code> directory.</p>\n<p>Install <code>del</code>:</p>\n<pre><code class=\"lang-shell\">npm install del --<span class=\"hljs-built_in\">save</span>-<span class=\"hljs-built_in\">dev</span>\n</code></pre>\n<p>Require dependencies:</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">const</span> del = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'del'</span>);\n</code></pre>\n<p>Implement the <code>clean</code> task:</p>\n<pre><code class=\"lang-javascript\">gulp.task(<span class=\"hljs-string\">'clean'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">return</span> del(<span class=\"hljs-string\">'server/**/*'</span>);\n});\n</code></pre>\n<h2 id=\"step-4-markdown-task\">Step 4: Markdown Task</h2>\n<p>The <code>markdown</code> task will use <code>gulp-markdown-to-json</code> and <code>gulp-util</code> to create\nthe JSON files.</p>\n<p>Install <code>gulp-markdown-to-json</code> and <code>gulp-util</code>:</p>\n<pre><code class=\"lang-shell\">npm <span class=\"hljs-keyword\">install</span> gulp-markdown-<span class=\"hljs-keyword\">to</span>-<span class=\"hljs-keyword\">json</span> <span class=\"hljs-comment\">--save-dev</span>\nnpm <span class=\"hljs-keyword\">install</span> gulp-util <span class=\"hljs-comment\">--save-dev</span>\n</code></pre>\n<p>Require dependencies:</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">const</span> markdown = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'gulp-markdown-to-json'</span>);\n<span class=\"hljs-keyword\">const</span> gutil = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'gulp-util'</span>);\n</code></pre>\n<p>Implement the <code>markdown</code> task:</p>\n<pre><code class=\"lang-javascript\">gulp.task(<span class=\"hljs-string\">'markdown'</span>, [<span class=\"hljs-string\">'clean'</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">return</span> gulp.src(<span class=\"hljs-string\">'content/entries/**/*.md'</span>)\n    .pipe(gutil.buffer())\n    .pipe(markdown(<span class=\"hljs-string\">'entries.json'</span>))\n    .pipe(gulp.dest(<span class=\"hljs-string\">'server'</span>));\n});\n</code></pre>\n<h2 id=\"step-5-server-task\">Step 5: Server Task</h2>\n<p>The <code>server</code> task will use <code>gulp-json-transform</code> to post-process the JSON file.\nThe JSON object will be converted into an array and the ID in the file name will\nbe written into the content object.</p>\n<p>Install <code>gulp-json-transform</code>:</p>\n<pre><code class=\"lang-shell\">npm <span class=\"hljs-keyword\">install</span> gulp-<span class=\"hljs-keyword\">json</span>-transform <span class=\"hljs-comment\">--save-dev</span>\n</code></pre>\n<p>Require dependencies:</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">const</span> jsonTransform = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'gulp-json-transform'</span>);\n</code></pre>\n<p>Implement the <code>server</code> task:</p>\n<pre><code class=\"lang-javascript\">gulp.task(<span class=\"hljs-string\">'server'</span>, [<span class=\"hljs-string\">'markdown'</span>], function () {\n  <span class=\"hljs-keyword\">return</span> gulp.src(<span class=\"hljs-string\">'server/**/*.json'</span>)\n    .pipe(jsonTransform(object =&gt; <span class=\"hljs-keyword\">Object</span>.keys(object).<span class=\"hljs-built_in\">map</span>(<span class=\"hljs-built_in\">key</span> =&gt; {\n      object[<span class=\"hljs-built_in\">key</span>].id = parseInt(<span class=\"hljs-built_in\">key</span>);\n      <span class=\"hljs-keyword\">return</span> object[<span class=\"hljs-built_in\">key</span>];\n    })))\n    .pipe(gulp.dest(<span class=\"hljs-string\">'server'</span>));\n});\n</code></pre>\n<h2 id=\"step-6-result\">Step 6: Result</h2>\n<p>The result is a JSON file with an array of of content entries.</p>\n<p>Run:</p>\n<pre><code class=\"lang-shell\">gulp\n</code></pre>\n<p><code>server/entries.json</code>:</p>\n<pre><code class=\"lang-json\">[{\n  \"<span class=\"hljs-attr\">title</span>\": <span class=\"hljs-string\">\"Some Entry\"</span>,\n  \"<span class=\"hljs-attr\">body</span>\": <span class=\"hljs-string\">\"&lt;p&gt;Some Content&lt;/p&gt;\\n\"</span>,\n  \"<span class=\"hljs-attr\">id</span>\": <span class=\"hljs-number\">1</span>\n}, {\n  \"<span class=\"hljs-attr\">title</span>\": <span class=\"hljs-string\">\"Some Entry\"</span>,\n  \"<span class=\"hljs-attr\">body</span>\": <span class=\"hljs-string\">\"&lt;p&gt;Some Content&lt;/p&gt;\\n\"</span>,\n  \"<span class=\"hljs-attr\">id</span>\": <span class=\"hljs-number\">2</span>\n}, {\n  \"<span class=\"hljs-attr\">title</span>\": <span class=\"hljs-string\">\"Some Entry\"</span>,\n  \"<span class=\"hljs-attr\">body</span>\": <span class=\"hljs-string\">\"&lt;p&gt;Some Content&lt;/p&gt;\\n\"</span>,\n  \"<span class=\"hljs-attr\">id</span>\": <span class=\"hljs-number\">3</span>\n}]\n</code></pre>\n<p>The complete code can be found on Github: <a href=\"https://github.com/vicox/static-content-server\">https://github.com/vicox/static-content-server</a></p>\n","id":4}]